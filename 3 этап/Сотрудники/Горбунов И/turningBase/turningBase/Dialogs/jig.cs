//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\ug_customization\application\dialogs\jig\jig.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: USP
//              Version: NX 7.5
//              Date: 09-13-2013  (Format: mm-dd-yyyy)
//              Time: 17:58 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.IO;
using NXOpen;
using NXOpen.Assemblies;
using NXOpen.BlockStyler;
using NXOpen.UF;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public sealed class Jig : DialogProgpam
{
    //class members
    private readonly string _theDialogName;

    private UIBlock group0;// Block type: Group
    private UIBlock _selection0;// Block type: Selection
    private UIBlock _instrDiametrBlock;// Block type: Double
    private UIBlock _sleeveTypeBlock;// Block type: Enumeration
    private UIBlock _importPlankButton;// Block type: Button
    private UIBlock group01;// Block type: Group
    private UIBlock _label0;// Block type: Label
    private UIBlock _double01;// Block type: Double
    private UIBlock _toggle0;// Block type: Toggle
    private UIBlock _button01;// Block type: Button
    private UIBlock _toggle01;// Block type: Toggle
    private UIBlock _integer0;// Block type: Integer

    private Surface _selectedFace;

    private string _gost;

    private Catalog _catalog;

    //private 
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public Jig()
    {
        try
        {
            _theDialogName = AppDomain.CurrentDomain.BaseDirectory +
                             Config.DlxFolder + Path.DirectorySeparatorChar + Config.DlxJig;

            TheDialog = Config.TheUi.CreateDialog(_theDialogName);
            TheDialog.AddApplyHandler(apply_cb);
            TheDialog.AddOkHandler(ok_cb);
            TheDialog.AddUpdateHandler(update_cb);
            TheDialog.AddInitializeHandler(initialize_cb);
            TheDialog.AddFocusNotifyHandler(focusNotify_cb);
            TheDialog.AddKeyboardFocusNotifyHandler(keyboardFocusNotify_cb);
            TheDialog.AddDialogShownHandler(dialogShown_cb);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Ошибка!", Message.MessageIcon.Error, ex.ToString());
            throw;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    private void initialize_cb()
    {
        try
        {
            group0 = TheDialog.TopBlock.FindBlock("group0");
            _selection0 = TheDialog.TopBlock.FindBlock("selection0");
            _instrDiametrBlock = TheDialog.TopBlock.FindBlock("double0");
            _sleeveTypeBlock = TheDialog.TopBlock.FindBlock("enum0");
            _importPlankButton = TheDialog.TopBlock.FindBlock("button0");
            group01 = TheDialog.TopBlock.FindBlock("group01");
            _label0 = TheDialog.TopBlock.FindBlock("label0");
            _double01 = TheDialog.TopBlock.FindBlock("double01");
            _toggle0 = TheDialog.TopBlock.FindBlock("toggle0");
            _button01 = TheDialog.TopBlock.FindBlock("button01");
            _toggle01 = TheDialog.TopBlock.FindBlock("toggle01");
            _integer0 = TheDialog.TopBlock.FindBlock("integer0");

            _catalog = new Catalog12();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Message.Show("Block Styler", Message.MessageIcon.Error,
                                           ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    private void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
            Selection.MaskTriple[] mask = new Selection.MaskTriple[1];
            mask[0].Type = UFConstants.UF_solid_type;
            mask[0].Subtype = UFConstants.UF_all_subtype;
            mask[0].SolidBodySubtype = UFConstants.UF_UI_SEL_FEATURE_CYLINDRICAL_FACE;
            _selection0.GetProperties().SetSelectionFilter("SelectionFilter", Selection.SelectionAction.ClearAndEnableSpecific, mask);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error,
                                           ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    private int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error,
                                           ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    private int update_cb( UIBlock block)
    {
        try
        {
            if(block == _selection0)
            {
            //---------Enter your code here-----------
                Logger.WriteLine("Нажата кнопка 'Выбора объекта'.");
                SetFace(block);
            }
            else if(block == _instrDiametrBlock)
            {
            //---------Enter your code here-----------
            }
            else if(block == _sleeveTypeBlock)
            {
            //---------Enter your code here-----------
            }
            else if(block == _importPlankButton)
            {
            //---------Enter your code here-----------
                //запуск галереи
                _gost = "15321-70";
                ImportPlank();
            }
            else if(block == _label0)
            {
            //---------Enter your code here-----------
            }
            else if(block == _double01)
            {
            //---------Enter your code here-----------
            }
            else if(block == _toggle0)
            {
            //---------Enter your code here-----------
            }
            else if(block == _button01)
            {
            //---------Enter your code here-----------
            }
            else if(block == _toggle01)
            {
            //---------Enter your code here-----------
            }
            else if(block == _integer0)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error,
                                           ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    private int ok_cb()
    {
        int errorCode;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error,
                                           ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    private void focusNotify_cb(UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error,
                                           ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    private void keyboardFocusNotify_cb(UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error,
                                           ex.ToString());
        }
    }
    
    //---------------------------------------------------------------------------------

    private void SetFace(UIBlock block)
    {
        TaggedObject[] taggedObjects = block.GetProperties().GetTaggedObjectVector("SelectedObjects");
        _selectedFace = new Surface((Face) taggedObjects[0]);

        Logger.WriteLine("Выбран объект " + _selectedFace.Face);

        SetEnable(_instrDiametrBlock, true);
        SetEnable(_sleeveTypeBlock, true);
        SetEnable(_importPlankButton, true);

        _instrDiametrBlock.GetProperties().SetDouble("MaximumValue", _selectedFace.Radius * 2);
        _instrDiametrBlock.GetProperties().SetDouble("Value", _selectedFace.Radius * 2);
    }

    private void ImportPlank()
    {
        DataTable sleeves = SqlUspElement.GetSleeves(_catalog, GetSleeveTypeConditions(), _gost);
    }

    private string GetSleeveTypeConditions()
    {
        string gost;
        switch (_sleeveTypeBlock.GetProperties().GetEnumAsString("Value"))
        {
            case "Быстросменные":
                gost = SqlTabUspData.GetGost(SqlTabUspData.GostUsp.QuickSleeves, _catalog);
                return " and " + SqlTabUspData.CGost + " = '" + gost + "'";
            case "Обычные":
                gost = SqlTabUspData.GetGost(SqlTabUspData.GostUsp.Sleeves, _catalog);
                return " and " + SqlTabUspData.CGost + " = " + gost + "'";
        }
        return "";
    }

    private double GetDiametr()
    {
        return _instrDiametrBlock.GetProperties().GetDouble("Value");
    }

    
}
