//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\ug_customization\application\dialogs\setBoltInSlot.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: USP
//              Version: NX 7.5
//              Date: 11-08-2013  (Format: mm-dd-yyyy)
//              Time: 18:28 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.IO;
using NXOpen;
using NXOpen.BlockStyler;

/// <summary>
/// Класс диалога для вставки болта в наборе высоты.
/// </summary>
public class SetBoltInSlot : DialogProgpam
{
    //class members
    private readonly string _theDialogName;

    private UIBlock _group0;// Block type: Group
    private UIBlock _point0;// Block type: Specify Point
    private UIBlock _double0;// Block type: Specify Point

    //------------------------------------------------------------------------------

    private readonly Catalog _catalog;
    private readonly double _height;
    private double _reserveHeight;
    private readonly HeightElement _firstElement;

    private bool _pointIsSet;


    /// <summary>
    /// Создаёт экземпляр класса диалога для вставки болта в паз и в базовое отверстие детали набора высоты.
    /// </summary>
    /// <param name="catalog">Каталог используемых в сборке элементов.</param>
    /// <param name="height">Высота набора на высоту.</param>
    /// <param name="reserveHeight">Высота вылета болты из набора на высоту.</param>
    /// <param name="firstElement">Первый (или один из элементов) для набора на высоту.</param>
    public SetBoltInSlot(Catalog catalog, double height, double reserveHeight, HeightElement firstElement)
    {
        try
        {
            Init();
            _catalog = catalog;
            _height = height;
            _reserveHeight = reserveHeight;
            _firstElement = firstElement;

            _theDialogName = Path.Combine(ConfigDlx.FullDlxFolder, ConfigDlx.DlxSetBoltInSlot);

            TheDialog = Config.TheUi.CreateDialog(_theDialogName);
            TheDialog.AddApplyHandler(apply_cb);
            TheDialog.AddOkHandler(ok_cb);
            TheDialog.AddUpdateHandler(update_cb);
            TheDialog.AddInitializeHandler(initialize_cb);
            TheDialog.AddFocusNotifyHandler(focusNotify_cb);
            TheDialog.AddKeyboardFocusNotifyHandler(keyboardFocusNotify_cb);
            TheDialog.AddDialogShownHandler(dialogShown_cb);
        }
        catch (TimeoutException)
        {
            //---- Enter your exception handling code here -----
            //const string mess = "Нет соединения с БД!";
            //Logger.WriteError(mess, ex);
            //Message.Show(mess);
            throw;
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            string mess = "Ошибка в конструкторе " + GetType().Name;
            Logger.WriteError(mess, ex);
            Message.Show(mess);
            throw;
        }
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Message.ShowError(ex);
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    private void initialize_cb()
    {
        try
        {
            _group0 = TheDialog.TopBlock.FindBlock("group0");
            _point0 = TheDialog.TopBlock.FindBlock("point0");
            _double0 = TheDialog.TopBlock.FindBlock("double0");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Message.ShowError(ex);
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    private void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
            _double0.GetProperties().SetDouble("Value", _reserveHeight);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageType.Error, ex);
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    private int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageType.Error, ex);
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    private int update_cb( UIBlock block)
    {
        try
        {
            if(block == _point0)
            {
            //---------Enter your code here-----------
                SetBolt(block);
            }
            if (block == _double0)
            {
                //---------Enter your code here-----------
                _reserveHeight = _double0.GetProperties().GetDouble("Value");
                if (_pointIsSet)
                {
                    SetBolt(block);
                }
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageType.Error, ex);
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    private int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageType.Error, ex);
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    private void focusNotify_cb(UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageType.Error, ex);
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    private void keyboardFocusNotify_cb(UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageType.Error, ex);
        }
    }

    //----------------------------------------------------------------------------------

    private void SetBolt(UIBlock block)
    {
        try
        {
            Point3d point = GetPoint(block);
            UspElement element = NxFunctions.GetUnsuppressElement(point);
            Logger.WriteLine("Точка находится на компоненте ", element.ElementComponent.Name);
            Slot slot = element.GetNearestSlot(point);
            if (slot.Type == Config.SlotType.Pslot)
            {
                UnSelectObjects(block);
                _pointIsSet = false;
                const string mess = "Выбран П-образный паз! Для вставки болта необходимо выбрать Т-образный паз.";
                Logger.WriteLine(mess);
                Message.ShowError(mess);
                return;
            }
            double maxSlotHeight = Instr.Max(_catalog.SlotHeight1);
            double needHeight = maxSlotHeight + _height + _reserveHeight;
            double maxLen = SqlUspElement.GetMaxLenSlotFixture(_catalog);
            if (maxLen < needHeight)
            {
                UnSelectObjects(block);
                _pointIsSet = false;
                const string mess = "Подходящих по длине болтов не было найдено!";
                Logger.WriteLine(mess);
                Message.ShowError(mess);
                return;
            }
            string boltTitle = SqlUspElement.GetTitleMinLengthFixture(needHeight, _catalog);
            Katalog2005.Algorithm.SpecialFunctions.LoadPart(boltTitle, false);
            SlotTBolt bolt = new SlotTBolt(Katalog2005.Algorithm.SpecialFunctions.LoadedPart);
            bolt.SetInSlot(slot);
            bolt.SetInTunnel(_firstElement.HoleFace);
            _pointIsSet = true;
        }
        catch (BadQueryExeption)
        {
            Message.ShowError("Подходящих болтов не найдено!");
        }
        catch (TimeoutException)
        {
            Message.Timeout();
            throw;
        }
    }

    private Point3d GetPoint(UIBlock block)
    {
        Logger.WriteLine("Активирована кнопка постановки точки.");
        Point3d point = block.GetProperties().GetPoint("Point");
        Logger.WriteLine("Координаты точки", point);
        return point;
    }

    private void Init()
    {
        Check();
    }

    private void Check()
    {
        ConfigDlx.UnloadDialog(ConfigDlx.DlxSetBoltInSlot);
    }

    
}
