//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\ug_customization\application\dialogs\milingBase\milingBase.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: USP
//              Version: NX 7.5
//              Date: 08-19-2013  (Format: mm-dd-yyyy)
//              Time: 18:51 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.IO;
using NXOpen;
using NXOpen.BlockStyler;



//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public sealed class MilingBase : DialogProgpam
{
    //class members

    private readonly string _theDialogName;

    private UIBlock _group0;// Block type: Group
    private UIBlock _toggleRoundBase;// Block type: Toggle
    private UIBlock _enumSlotType;// Block type: Enumeration
    private UIBlock _group01;// Block type: Group
    private UIBlock _toggle01;// Block type: Toggle
    private UIBlock _toggle02;// Block type: Toggle
    private UIBlock _group02;// Block type: Group
    private UIBlock _selection0;// Block type: Selection
    private UIBlock _group;// Block type: Group
    private UIBlock _direction0;// Block type: Reverse Direction
    private UIBlock _double0;// Block type: Double
    private UIBlock _group1;// Block type: Group
    private UIBlock _selection01;// Block type: Selection
    private UIBlock _selection02;// Block type: Selection
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public MilingBase()
    {
        try
        {
            _theDialogName = AppDomain.CurrentDomain.BaseDirectory +
                Config.DlxFolder + Path.DirectorySeparatorChar + Config.DlxMilingBase;
            Logger.WriteLine(_theDialogName);

            TheDialog = Config.TheUi.CreateDialog(_theDialogName);
            TheDialog.AddApplyHandler(apply_cb);
            TheDialog.AddOkHandler(ok_cb);
            TheDialog.AddUpdateHandler(update_cb);
            TheDialog.AddCancelHandler(cancel_cb);
            TheDialog.AddInitializeHandler(initialize_cb);
            TheDialog.AddFocusNotifyHandler(focusNotify_cb);
            TheDialog.AddKeyboardFocusNotifyHandler(keyboardFocusNotify_cb);
            TheDialog.AddDialogShownHandler(dialogShown_cb);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show(ex);
            throw;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------

    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedParameter.Global
    public static int UnloadLibrary(string arg)
// ReSharper restore UnusedParameter.Global
// ReSharper restore UnusedMember.Global
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.TheUi.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

   
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    private void initialize_cb()
    {
        try
        {
            _group0 = TheDialog.TopBlock.FindBlock("group0");
            _toggleRoundBase = TheDialog.TopBlock.FindBlock("toggle0");
            _enumSlotType = TheDialog.TopBlock.FindBlock("enum0");
            _group01 = TheDialog.TopBlock.FindBlock("group01");
            _toggle01 = TheDialog.TopBlock.FindBlock("toggle01");
            _toggle02 = TheDialog.TopBlock.FindBlock("toggle02");
            _group02 = TheDialog.TopBlock.FindBlock("group02");
            _selection0 = TheDialog.TopBlock.FindBlock("selection0");
            _group = TheDialog.TopBlock.FindBlock("group");
            _direction0 = TheDialog.TopBlock.FindBlock("direction0");
            _double0 = TheDialog.TopBlock.FindBlock("double0");
            _group1 = TheDialog.TopBlock.FindBlock("group1");
            _selection01 = TheDialog.TopBlock.FindBlock("selection01");
            _selection02 = TheDialog.TopBlock.FindBlock("selection02");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    private void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    private int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    private int update_cb( UIBlock block)
    {
        try
        {
            if(block == _toggleRoundBase)
            {
            //---------Enter your code here-----------
                Logger.WriteLine("Нажат переключатель выбора круглых баз.");
                PropertyList trbProp = _toggleRoundBase.GetProperties();
                bool value = trbProp.GetLogical("Value");
                SetEnum(!value);
            }
            else if(block == _enumSlotType)
            {
            //---------Enter your code here-----------
            }
            else if(block == _toggle01)
            {
            //---------Enter your code here-----------
            }
            else if(block == _toggle02)
            {
            //---------Enter your code here-----------
            }
            else if(block == _selection0)
            {
            //---------Enter your code here-----------
            }
            else if(block == _direction0)
            {
            //---------Enter your code here-----------
            }
            else if(block == _double0)
            {
            //---------Enter your code here-----------
            }
            else if(block == _selection01)
            {
            //---------Enter your code here-----------
            }
            else if(block == _selection02)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    private int ok_cb()
    {
        int errorCode;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    private int cancel_cb()
    {
        try
        {
            //---- Enter your callback code here -----
            Logger.WriteLine("Нажата кнопка Отмена.");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Message.Show(ex);
        }
        return 0;
    }
    
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    private void focusNotify_cb(UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    private void keyboardFocusNotify_cb(UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Logger.WriteError(ex.ToString());
            Message.Show("Block Styler", Message.MessageIcon.Error, ex);
        }
    }

    //-------------------------------------

    void SetEnum(bool enable)
    {
        PropertyList propertyList = _enumSlotType.GetProperties();
        SetEnable(propertyList, enable);
        if (!enable)
        {
            propertyList.SetEnum("Value", 0);
        }
    }
    
}
